// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    And16(a = instruction, b = instruction
    , out[0] = jumpIfPos
    , out[1] = jumpIfZero
    , out[2] = jumpIfNeg
    , out[3] = storeInM
    , out[4] = storeInD
    , out[5] = storeInA
    , out[6]  = no
    , out[7]  = f
    , out[8]  = ny
    , out[9]  = zy
    , out[10] = nx
    , out[11] = zx
    , out[12] = AorMsel
    , out[15] = isCinstr);
    Not (in = isCinstr, out = isAinstr);
    
    Mux16(a = instruction, b = aluOut, sel = isCinstr, out = aInput);
    Or( a = isAinstr, b = storeInA, out = loadA);
    ARegister ( in = aInput
    	      , load = loadA
    	      , out = A
    	      , out[0..14] = addressM
    	      , out = PCin);

    // A or M
    Mux16(a = A, b = inM, sel = AorMsel, out = AorM);

    // D register
    And (a = isCinstr, b = storeInD, out = shouldStoreInD);
    DRegister ( in = aluOut
    	     , load = shouldStoreInD
	     , out = D);

    // ALU
    ALU ( x = D
    	, y = AorM
	, zx = zx
	, nx = nx
	, zy = zy
	, ny = ny
	, f  = f
	, no = no
    	, out = aluOut
	, out = outM
	, zr = zr
	, ng = ng);  
    
    And( a = ng, b = jumpIfNeg, out = negJump);
    And( a = zr, b = jumpIfZero, out = zeroJump);
    Or( a = ng, b = zr, out = nonPos);
    Not(in = nonPos, out = pos);
    And( a = pos, b = jumpIfPos, out = PosJump);
    Or( a = negJump, b = zeroJump, out = nonPosJump);
    Or( a = nonPosJump, b = PosJump, out = shouldJump);
    And( a = shouldJump, b = isCinstr, out = jump);

    Not(in = jump, out = inc);
    PC ( in = PCin
        , inc = inc
    	, load = jump
	, reset = reset
	, out[0..14] = pc);

    And ( a = isCinstr, b = storeInM, out = writeM);
}